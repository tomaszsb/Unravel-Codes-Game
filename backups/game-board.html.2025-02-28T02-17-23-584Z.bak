<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Game Board">
    <title>Game Board</title>
    
    <!-- CSS files -->
    <link rel="stylesheet" href="css/theme.css">
    <link rel="stylesheet" href="css/game-styles.css">

    <!-- Load React -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
</head>
<body>
    <!-- Root container for React -->
    <div id="game-board-root"></div>
    <div id="status-display" style="padding: 20px; margin: 20px; border: 1px solid #ccc; background: #f5f5f5;"></div>

    <!-- First load the component loader -->
    <script src="js/game-component-loader.js"></script>

    <!-- Loading message -->
    <div id="initializing-overlay" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); display: flex; flex-direction: column; justify-content: center; align-items: center; z-index: 1000;">
        <div style="color: white; font-size: 24px; margin-bottom: 20px;">Initializing Game Systems</div>
        <div class="loading-spinner" style="width: 50px; height: 50px; border: 5px solid #f3f3f3; border-top: 5px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
        <div id="loading-status" style="color: white; margin-top: 20px; font-size: 16px;">Loading scripts...</div>
        <div id="init-error" style="color: #ff6b6b; margin-top: 20px; max-width: 80%; text-align: center; display: none;">
            <div id="error-message"></div>
            <button id="retry-button" style="background: #3498db; border: none; color: white; padding: 10px 20px; margin-top: 15px; border-radius: 4px; cursor: pointer;">Retry</button>
            <button id="setup-button" style="background: #2ecc71; border: none; color: white; padding: 10px 20px; margin-top: 15px; margin-left: 10px; border-radius: 4px; cursor: pointer;">Return to Setup</button>
        </div>
    </div>

    <style>
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>

    <!-- Load using a script that handles sequential loading -->
    <script>
    // Log status with timestamp for debugging
    function logStatus(message) {
        const now = new Date();
        const timestamp = now.toLocaleTimeString() + '.' + now.getMilliseconds();
        const formattedMessage = `[${timestamp}] ${message}`;
        console.log(formattedMessage);
        
        const statusDisplay = document.getElementById('status-display');
        if (statusDisplay) {
            const entry = document.createElement('div');
            entry.textContent = formattedMessage;
            statusDisplay.appendChild(entry);
        }
        
        // Update loading status
        const loadingStatus = document.getElementById('loading-status');
        if (loadingStatus) {
            loadingStatus.textContent = message;
        }
    }
    
    // Show error in overlay
    function showError(message) {
        const errorDiv = document.getElementById('init-error');
        const errorMessage = document.getElementById('error-message');
        
        if (errorDiv && errorMessage) {
            errorDiv.style.display = 'block';
            errorMessage.textContent = message;
        }
    }
    
    // Hide initializing overlay
    function hideOverlay() {
        const overlay = document.getElementById('initializing-overlay');
        if (overlay) {
            overlay.style.display = 'none';
        }
    }
    
    // Load a script with Promise
    function loadScript(src) {
        return new Promise((resolve, reject) => {
            logStatus(`Loading script: ${src}`);
            const script = document.createElement('script');
            script.src = src;
            script.onload = () => {
                logStatus(`✓ Script loaded: ${src}`);
                // Wait a short time to ensure script is fully executed
                setTimeout(resolve, 20);
            };
            script.onerror = (error) => {
                logStatus(`✗ Script loading error: ${src}`);
                reject(error);
            };
            document.body.appendChild(script);
        });
    }

    // Inline script loading to ensure correct order
    async function loadGameScripts() {
        try {
            logStatus('Starting script loading sequence');
            
            // Core systems first
            await loadScript('js/file-system.js');
            await loadScript('js/csv-parser.js');
            await loadScript('js/save-manager.js');
            await loadScript('js/game-data-manager.js');
            await loadScript('js/player-palettes.js');
            await loadScript('js/color-manager.js');
            await loadScript('js/player-manager.js');
            await loadScript('js/player-progress-manager.js');
            
            // Load our system initializer
            await loadScript('js/game-system-initializer.js');
            
            // Wait a moment to ensure core systems are initialized
            await new Promise(resolve => setTimeout(resolve, 200));
            
            // Create component config for use with ComponentLoader
            const componentConfigs = [
                { name: 'LeaderBoard', src: 'js/components/leaderboard-component.js' },
                { name: 'ProgressMap', src: 'js/components/progress-map-component.js' },
                { name: 'SpaceInfo', src: 'js/components/space-info-component.js' },
                { name: 'PlayerStatus', src: 'js/components/player-status-component.js' },
                { name: 'ActionRequirements', src: 'js/components/action-requirements-component.js' },
                { name: 'DicePrompt', src: 'js/components/dice-prompt-component.js' },
                { name: 'DiceResult', src: 'js/components/dice-result-component.js' },
                { name: 'DiceSystem', src: 'js/components/dice-system-component.js' },
                { name: 'GameInstructions', src: 'js/components/game-instructions-component.js' },
                { name: 'PerformedActions', src: 'js/components/performed-actions-component.js' },
                { name: 'MoveSelectionComponent', src: 'js/components/move-selection-component.js' },
                { name: 'GameStateDisplay', src: 'js/components/game-state-display-component.js' }
            ];
            
            // Load all legacy components
            for (const config of componentConfigs) {
                await loadScript(config.src);
                await new Promise(resolve => setTimeout(resolve, 50)); // Small pause between loads
            }
            
            // Load refactored components next with a bigger pause before
            await new Promise(resolve => setTimeout(resolve, 300));
            
            await loadScript('js/components/SingleMoveDisplay.js');
            await loadScript('js/components/MoveSelection.js');
            
            // Wait a moment to ensure refactored components are loaded
            await new Promise(resolve => setTimeout(resolve, 300));
            
            // Load GameBoard component last
            await loadScript('js/components/GameBoard.js');
            
            // Wait to ensure it's loaded
            await new Promise(resolve => setTimeout(resolve, 300));
            
            // Final check for GameBoard
            logStatus(`GameBoard availability after loading: ${typeof window.GameBoard}`);
            logStatus(`GameBoard_LOADED flag: ${window.GAMEBOARD_LOADED}`);
            
            // Verify through component loader
            await window.ComponentLoader.verifyComponent('GameBoard');
            logStatus('GameBoard component verified through ComponentLoader');
            
            return true;
        } catch (error) {
            logStatus(`Script loading error: ${error.message}`);
            throw error;
        }
    }
    
    // Initialize game systems
    async function initializeGameSystems() {
        try {
            logStatus('Initializing game systems...');
            await window.GameSystemInitializer.initializeWithRetries(3);
            logStatus('Game systems initialized successfully');
            return true;
        } catch (error) {
            logStatus(`Game system initialization failed: ${error.message}`);
            throw error;
        }
    }
    
    // Handle retry button
    document.getElementById('retry-button').addEventListener('click', async () => {
        document.getElementById('init-error').style.display = 'none';
        await startGameInitialization();
    });
    
    // Handle setup button
    document.getElementById('setup-button').addEventListener('click', () => {
        window.location.href = 'player-setup.html';
    });
    
    // Main initialization function
    async function startGameInitialization() {
        try {
            logStatus('=== Game Board Initialization Started ===');
            
            // Load all scripts sequentially
            await loadGameScripts();
            
            // Initialize all game systems
            await initializeGameSystems();
            
            // Double check that GameBoard is available
            if (typeof window.GameBoard !== 'function') {
                logStatus('WARNING: GameBoard not found as function, checking for _LOADED flag');
                
                if (window.GAMEBOARD_LOADED !== true) {
                    throw new Error('GameBoard component not available after loading scripts');
                } else {
                    logStatus('GAMEBOARD_LOADED flag is true, continuing');
                }
            }
            
            logStatus('Rendering GameBoard component...');
            
            // Hide the loading overlay
            hideOverlay();
            
            // Render the GameBoard
            ReactDOM.render(
                React.createElement(window.GameBoard),
                document.getElementById('game-board-root')
            );
            
            logStatus('=== Game Board Initialization Complete ===');
            
        } catch (error) {
            logStatus(`ERROR: ${error.message}`);
            console.error('Game initialization failed:', error);
            
            // Show error in overlay
            showError(error.message || 'Failed to initialize game');
        }
    }
    
    // Start initialization when document is ready
    document.addEventListener('DOMContentLoaded', startGameInitialization);
    </script>
</body>
</html>
